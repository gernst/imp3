# Begin -- grammar generated by Yapps
from __future__ import print_function
import sys, re
from yapps import runtime

class IMP3Scanner(runtime.Scanner):
    patterns = [
        ('"%"', re.compile('%')),
        ('"select"', re.compile('select')),
        ('"focus"', re.compile('focus')),
        ('"rel"', re.compile('rel')),
        ('"marked"', re.compile('marked')),
        ('"is"', re.compile('is')),
        ('"!="', re.compile('!=')),
        ('"=="', re.compile('==')),
        ('"equal"', re.compile('equal')),
        ('"not"', re.compile('not')),
        ('"false"', re.compile('false')),
        ('"true"', re.compile('true')),
        ('"assume"', re.compile('assume')),
        ('"optional"', re.compile('optional')),
        ('"or"', re.compile('or')),
        ('"choice"', re.compile('choice')),
        ('"assert"', re.compile('assert')),
        ('"else"', re.compile('else')),
        ('"if"', re.compile('if')),
        ('"while"', re.compile('while')),
        ('"\\."', re.compile('\\.')),
        ('"null"', re.compile('null')),
        ('"\\)"', re.compile('\\)')),
        ('"\\("', re.compile('\\(')),
        ('":="', re.compile(':=')),
        ('"call_args"', re.compile('call_args')),
        ('"inline call"', re.compile('inline call')),
        ('"call"', re.compile('call')),
        ('"unmark"', re.compile('unmark')),
        ('"mark"', re.compile('mark')),
        ('"dispose"', re.compile('dispose')),
        ('"free"', re.compile('free')),
        ('"allocate"', re.compile('allocate')),
        ('"set_field"', re.compile('set_field')),
        ('"clear_field"', re.compile('clear_field')),
        ("'\\.'", re.compile('\\.')),
        ('"get_field"', re.compile('get_field')),
        ('"copy_as"', re.compile('copy_as')),
        ('"copy"', re.compile('copy')),
        ('"clear"', re.compile('clear')),
        ('"goto"', re.compile('goto')),
        ('"do"', re.compile('do')),
        ('"return"', re.compile('return')),
        ('"gc"', re.compile('gc')),
        ('"exit"', re.compile('exit')),
        ('"break"', re.compile('break')),
        ('"skip"', re.compile('skip')),
        ('"function"', re.compile('function')),
        ('"override"', re.compile('override')),
        ('"of"', re.compile('of')),
        ('"case"', re.compile('case')),
        ('"data"', re.compile('data')),
        ('"type"', re.compile('type')),
        ('"<"', re.compile('<')),
        ('"sel"', re.compile('sel')),
        ('"var"', re.compile('var')),
        ('"actions"', re.compile('actions')),
        ('"predicates"', re.compile('predicates')),
        ('"import"', re.compile('import')),
        ('"show"', re.compile('show')),
        ('"begin"', re.compile('begin')),
        ('":"', re.compile(':')),
        ('"condition"', re.compile('condition')),
        ('"ensures"', re.compile('ensures')),
        ('"requires"', re.compile('requires')),
        ('"init"', re.compile('init')),
        ('"program"', re.compile('program')),
        ('"contracts"', re.compile('contracts')),
        ('"end"', re.compile('end')),
        ('"signature"', re.compile('signature')),
        ('[ \\t]+', re.compile('[ \\t]+')),
        ('#.*?\r?\n+', re.compile('#.*?\r?\n+')),
        ('ID', re.compile('[a-zA-Z_][a-zA-Z_0-9]*')),
        ('IDW', re.compile('[a-zA-Z_\\*]+[0-9\\*]*')),
        ('IDP', re.compile('[a-zA-Z_\\.]+[0-9]*')),
        ('PRED', re.compile('[a-zA-Z_\\[\\]]+[0-9]*')),
        ('LHS', re.compile('[a-zA-Z_]+[0-9]*')),
        ('RHS', re.compile('[a-zA-Z_]+[0-9]*')),
        ('F', re.compile('[a-zA-Z_]+[0-9]*')),
        ('TY', re.compile('[a-zA-Z_]+[0-9]*')),
        ('ARR', re.compile('\\[\\]')),
        ('NL', re.compile('[\\n;]+')),
        ('STR', re.compile('".*?"')),
        ('ST', re.compile('skip|break|exit|return')),
        ('ATTR', re.compile('@output|@input')),
        ('OST', re.compile('allocate|get_field|set_field|clear_field|free|dispose')),
        ('TOF', re.compile('true|false')),
    ]
    def __init__(self, str,*args,**kw):
        runtime.Scanner.__init__(self,None,{'#.*?\r?\n+':None,'[ \\t]+':None,},str,*args,**kw)

class IMP3(runtime.Parser):
    Context = runtime.Context
    def signature(self, _parent=None):
        _context = self.Context(_parent, self._scanner, 'signature', [])
        self._scan('"signature"', context=_context)
        ID = self._scan('ID', context=_context)
        name = ID
        NL = self._scan('NL', context=_context)
        structs = self.structs(_context)
        vars = self.vars(_context)
        functions = self.functions(_context)
        self._scan('"end"', context=_context)
        return "signature", name, structs, vars, functions

    def contracts(self, _parent=None):
        _context = self.Context(_parent, self._scanner, 'contracts', [])
        c = []; d = []
        self._scan('"contracts"', context=_context)
        NL = self._scan('NL', context=_context)
        vars = self.vars(_context)
        while self._peek('"end"', '"program"', '"condition"', '"begin"', '"function"', context=_context) in ['"program"', '"condition"']:
            _token = self._peek('"program"', '"condition"', context=_context)
            if _token == '"program"':
                contract = self.contract(_context)
                c.append(contract)
                NL = self._scan('NL', context=_context)
            else: # == '"condition"'
                prepost = self.prepost(_context)
                d.append(prepost)
                NL = self._scan('NL', context=_context)
        functions = self.functions(_context)
        self._scan('"end"', context=_context)
        return "contracts", d, c, vars, functions

    def contract(self, _parent=None):
        _context = self.Context(_parent, self._scanner, 'contract', [])
        p = []; i = []; r = []; e = []
        self._scan('"program"', context=_context)
        idwlist = self.idwlist(_context)
        progs = idwlist
        NL = self._scan('NL', context=_context)
        while self._peek('"end"', '"init"', '"requires"', '"ensures"', context=_context) != '"end"':
            _token = self._peek('"init"', '"requires"', '"ensures"', context=_context)
            if _token == '"init"':
                self._scan('"init"', context=_context)
                idlist = self.idlist(_context)
                i.extend(idlist)
                NL = self._scan('NL', context=_context)
            elif _token == '"requires"':
                self._scan('"requires"', context=_context)
                idlist = self.idlist(_context)
                r.extend(idlist)
                NL = self._scan('NL', context=_context)
            else: # == '"ensures"'
                self._scan('"ensures"', context=_context)
                idlist = self.idlist(_context)
                e.extend(idlist)
                NL = self._scan('NL', context=_context)
        self._scan('"end"', context=_context)
        return "contract", progs, i, r, e

    def prepost(self, _parent=None):
        _context = self.Context(_parent, self._scanner, 'prepost', [])
        self._scan('"condition"', context=_context)
        ID = self._scan('ID', context=_context)
        self._scan('":"', context=_context)
        STR = self._scan('STR', context=_context)
        return "condition", ID, STR

    def idlist(self, _parent=None):
        _context = self.Context(_parent, self._scanner, 'idlist', [])
        l = []
        while self._peek('ID', 'NL', context=_context) == 'ID':
            ID = self._scan('ID', context=_context)
            l.append(ID)
        return l

    def idwlist(self, _parent=None):
        _context = self.Context(_parent, self._scanner, 'idwlist', [])
        l = []
        while self._peek('IDW', 'NL', context=_context) == 'IDW':
            IDW = self._scan('IDW', context=_context)
            l.append(IDW)
        return l

    def program(self, _parent=None):
        _context = self.Context(_parent, self._scanner, 'program', [])
        self._scan('"program"', context=_context)
        ID = self._scan('ID', context=_context)
        name = ID; show = None
        NL = self._scan('NL', context=_context)
        includes = self.includes(_context)
        structs = self.structs(_context)
        vars = self.vars(_context)
        functions = self.functions(_context)
        self._scan('"begin"', context=_context)
        NL = self._scan('NL', context=_context)
        body = self.body(_context)
        while self._peek('"end"', '"show"', context=_context) == '"show"':
            self._scan('"show"', context=_context)
            NL = self._scan('NL', context=_context)
            show = self.show(_context)
        self._scan('"end"', context=_context)
        return "program", name, includes, structs, vars, functions, body, show

    def includes(self, _parent=None):
        _context = self.Context(_parent, self._scanner, 'includes', [])
        i = []; p = []; a = []; c = []
        while self._peek('"predicates"', '"import"', '"actions"', '"contracts"', '"type"', '"data"', '"case"', '"begin"', '"end"', '"var"', '"program"', '"condition"', '"function"', context=_context) == '"import"':
            self._scan('"import"', context=_context)
            IDP = self._scan('IDP', context=_context)
            i.append(IDP)
            NL = self._scan('NL', context=_context)
        while self._peek('"actions"', '"predicates"', '"contracts"', '"type"', '"data"', '"case"', '"begin"', '"end"', '"var"', '"program"', '"condition"', '"function"', context=_context) == '"predicates"':
            self._scan('"predicates"', context=_context)
            IDP = self._scan('IDP', context=_context)
            p.append(IDP)
            NL = self._scan('NL', context=_context)
        while self._peek('"contracts"', '"actions"', '"type"', '"data"', '"case"', '"begin"', '"end"', '"var"', '"program"', '"condition"', '"function"', context=_context) == '"actions"':
            self._scan('"actions"', context=_context)
            IDP = self._scan('IDP', context=_context)
            a.append(IDP)
            NL = self._scan('NL', context=_context)
        while self._peek('"contracts"', '"type"', '"data"', '"case"', '"begin"', '"end"', '"var"', '"program"', '"condition"', '"function"', context=_context) == '"contracts"':
            self._scan('"contracts"', context=_context)
            IDP = self._scan('IDP', context=_context)
            c.append(IDP)
            NL = self._scan('NL', context=_context)
        return (i, p, a, c)

    def structs(self, _parent=None):
        _context = self.Context(_parent, self._scanner, 'structs', [])
        s = []
        while self._peek('"type"', '"data"', '"case"', '"end"', '"var"', '"begin"', '"program"', '"condition"', '"function"', context=_context) in ['"type"', '"data"', '"case"']:
            _token = self._peek('"type"', '"data"', '"case"', context=_context)
            if _token == '"type"':
                struct = self.struct(_context)
                s.append(struct)
                NL = self._scan('NL', context=_context)
            elif _token == '"data"':
                data = self.data(_context)
                s.append(data)
                NL = self._scan('NL', context=_context)
            else: # == '"case"'
                case = self.case(_context)
                s.append(case)
                NL = self._scan('NL', context=_context)
        return s

    def vars(self, _parent=None):
        _context = self.Context(_parent, self._scanner, 'vars', [])
        v = []
        while self._peek('"var"', '"begin"', '"end"', '"program"', '"condition"', '"function"', context=_context) == '"var"':
            var = self.var(_context)
            v.append(var)
            NL = self._scan('NL', context=_context)
        return v

    def sels(self, _parent=None):
        _context = self.Context(_parent, self._scanner, 'sels', [])
        v = []
        while self._peek('"sel"', '"end"', '"override"', context=_context) == '"sel"':
            sel = self.sel(_context)
            v.append(sel)
            NL = self._scan('NL', context=_context)
        return v

    def functions(self, _parent=None):
        _context = self.Context(_parent, self._scanner, 'functions', [])
        f = []
        while self._peek('"function"', '"end"', '"begin"', context=_context) == '"function"':
            function = self.function(_context)
            f.append(function)
            NL = self._scan('NL', context=_context)
        return f

    def overrides(self, _parent=None):
        _context = self.Context(_parent, self._scanner, 'overrides', [])
        o = []
        while self._peek('"override"', '"end"', context=_context) == '"override"':
            override = self.override(_context)
            o.append(override)
            NL = self._scan('NL', context=_context)
        return o

    def type(self, _parent=None):
        _context = self.Context(_parent, self._scanner, 'type', [])
        TY = self._scan('TY', context=_context)
        t = TY
        if self._peek('ARR', 'ATTR', 'NL', context=_context) == 'ARR':
            ARR = self._scan('ARR', context=_context)
            t += "[]"
        return t

    def var(self, _parent=None):
        _context = self.Context(_parent, self._scanner, 'var', [])
        self._scan('"var"', context=_context)
        ID = self._scan('ID', context=_context)
        self._scan('":"', context=_context)
        type = self.type(_context)
        if 1:
            var_attrs = self.var_attrs(_context)
        return "var", ID, type, var_attrs

    def sel(self, _parent=None):
        _context = self.Context(_parent, self._scanner, 'sel', [])
        self._scan('"sel"', context=_context)
        ID = self._scan('ID', context=_context)
        self._scan('":"', context=_context)
        type = self.type(_context)
        if 1:
            var_attrs = self.var_attrs(_context)
        return "var", ID, type, var_attrs

    def var_attrs(self, _parent=None):
        _context = self.Context(_parent, self._scanner, 'var_attrs', [])
        a = []
        while self._peek('ATTR', 'NL', context=_context) == 'ATTR':
            ATTR = self._scan('ATTR', context=_context)
            a.append(ATTR)
        return a

    def extends(self, _parent=None):
        _context = self.Context(_parent, self._scanner, 'extends', [])
        _token = self._peek('NL', '"<"', context=_context)
        if _token == 'NL':
            NL = self._scan('NL', context=_context)
            return None
        else: # == '"<"'
            self._scan('"<"', context=_context)
            TY = self._scan('TY', context=_context)
            NL = self._scan('NL', context=_context)
            return TY

    def struct(self, _parent=None):
        _context = self.Context(_parent, self._scanner, 'struct', [])
        self._scan('"type"', context=_context)
        TY = self._scan('TY', context=_context)
        extends = self.extends(_context)
        sels = self.sels(_context)
        overrides = self.overrides(_context)
        self._scan('"end"', context=_context)
        return "struct", TY, sels, extends, overrides

    def data(self, _parent=None):
        _context = self.Context(_parent, self._scanner, 'data', [])
        self._scan('"data"', context=_context)
        TY = self._scan('TY', context=_context)
        return "data", TY

    def case(self, _parent=None):
        _context = self.Context(_parent, self._scanner, 'case', [])
        self._scan('"case"', context=_context)
        ID = self._scan('ID', context=_context)
        self._scan('"of"', context=_context)
        TY = self._scan('TY', context=_context)
        NL = self._scan('NL', context=_context)
        sels = self.sels(_context)
        self._scan('"end"', context=_context)
        return "case", ID, TY, sels

    def override(self, _parent=None):
        _context = self.Context(_parent, self._scanner, 'override', [])
        self._scan('"override"', context=_context)
        OST = self._scan('OST', context=_context)
        return "override", OST

    def function(self, _parent=None):
        _context = self.Context(_parent, self._scanner, 'function', [])
        self._scan('"function"', context=_context)
        ID = self._scan('ID', context=_context)
        NL = self._scan('NL', context=_context)
        if self._peek('"begin"', '"var"', '"end"', 'NL', '"show"', '"program"', '"condition"', '"skip"', '"break"', '"exit"', '"gc"', '"return"', '"do"', '"goto"', '"function"', '"while"', '"if"', '"clear"', '"copy"', '"copy_as"', '"get_field"', '"clear_field"', '"set_field"', '"allocate"', '"free"', '"dispose"', '"assert"', '"mark"', '"unmark"', '"call"', '"inline call"', '"call_args"', '"choice"', '"optional"', '"assume"', '"focus"', '"select"', '"%"', '"or"', '"else"', '"null"', 'LHS', context=_context) in ['"begin"', '"var"', '"end"', '"program"', '"condition"', '"function"']:
            vars = self.vars(_context)
            self._scan('"begin"', context=_context)
            NL = self._scan('NL', context=_context)
        body = self.body(_context)
        self._scan('"end"', context=_context)
        return "function", ID, body

    def body(self, _parent=None):
        _context = self.Context(_parent, self._scanner, 'body', [])
        s = []
        while self._peek('NL', '"skip"', '"break"', '"exit"', '"gc"', '"return"', '"do"', '"goto"', '"show"', '"end"', '"while"', '"if"', '"clear"', '"copy"', '"copy_as"', '"get_field"', '"clear_field"', '"set_field"', '"allocate"', '"free"', '"dispose"', '"assert"', '"mark"', '"unmark"', '"call"', '"inline call"', '"call_args"', '"choice"', '"optional"', '"assume"', '"focus"', '"select"', '"%"', '"or"', '"null"', 'LHS', '"else"', context=_context) not in ['"show"', '"end"', '"or"', '"else"']:
            statement = self.statement(_context)
            s.append(statement)
            NL = self._scan('NL', context=_context)
        return s

    def show(self, _parent=None):
        _context = self.Context(_parent, self._scanner, 'show', [])
        s = []
        while self._peek('STR', '"show"', '"end"', context=_context) == 'STR':
            STR = self._scan('STR', context=_context)
            s.append(STR)
            NL = self._scan('NL', context=_context)
        return s

    def statement(self, _parent=None):
        _context = self.Context(_parent, self._scanner, 'statement', [])
        _token = self._peek('"skip"', '"break"', '"exit"', '"gc"', '"return"', '"do"', '"goto"', '"while"', '"if"', '"clear"', '"copy"', '"copy_as"', '"get_field"', '"clear_field"', '"set_field"', '"allocate"', '"free"', '"dispose"', '"assert"', '"mark"', '"unmark"', '"call"', '"inline call"', '"call_args"', '"choice"', '"optional"', '"assume"', '"focus"', '"select"', '"%"', 'NL', '"null"', 'LHS', context=_context)
        if _token == '"skip"':
            self._scan('"skip"', context=_context)
            return "skip",
        elif _token == '"break"':
            self._scan('"break"', context=_context)
            return "break",
        elif _token == '"exit"':
            self._scan('"exit"', context=_context)
            return "exit",
        elif _token == '"gc"':
            self._scan('"gc"', context=_context)
            return "gc",
        elif _token == '"return"':
            self._scan('"return"', context=_context)
            return "return",
        elif _token in ['"while"', 'NL']:
            while_ = self.while_(_context)
            return while_
        elif _token == '"if"':
            if_ = self.if_(_context)
            return if_
        elif _token == '"clear"':
            clear = self.clear(_context)
            return clear
        elif _token == '"copy"':
            copy = self.copy(_context)
            return copy
        elif _token == '"copy_as"':
            copy_as = self.copy_as(_context)
            return copy_as
        elif _token == '"get_field"':
            get_field = self.get_field(_context)
            return get_field
        elif _token == '"clear_field"':
            clear_field = self.clear_field(_context)
            return clear_field
        elif _token == '"set_field"':
            set_field = self.set_field(_context)
            return set_field
        elif _token == '"allocate"':
            allocate = self.allocate(_context)
            return allocate
        elif _token == '"free"':
            free = self.free(_context)
            return free
        elif _token == '"dispose"':
            dispose = self.dispose(_context)
            return dispose
        elif _token == '"assert"':
            assert_ = self.assert_(_context)
            return assert_
        elif _token == '"mark"':
            mark = self.mark(_context)
            return mark
        elif _token == '"unmark"':
            unmark = self.unmark(_context)
            return unmark
        elif _token == '"call"':
            call = self.call(_context)
            return call
        elif _token == '"inline call"':
            inline = self.inline(_context)
            return inline
        elif _token == '"call_args"':
            call_args = self.call_args(_context)
            return call_args
        elif _token == '"choice"':
            choice = self.choice(_context)
            return choice
        elif _token == '"optional"':
            optional = self.optional(_context)
            return optional
        elif _token == '"assume"':
            assume = self.assume(_context)
            return assume
        elif _token == '"focus"':
            focus = self.focus(_context)
            return focus
        elif _token == '"select"':
            select = self.select(_context)
            return select
        elif _token == '"%"':
            do_ = self.do_(_context)
            return do_
        elif _token == '"do"':
            self._scan('"do"', context=_context)
            STR = self._scan('STR', context=_context)
            return "do", STR
        elif _token == '"goto"':
            self._scan('"goto"', context=_context)
            STR = self._scan('STR', context=_context)
            return "goto", STR
        else: # in ['"null"', 'LHS']
            assign = self.assign(_context)
            return assign

    def clear(self, _parent=None):
        _context = self.Context(_parent, self._scanner, 'clear', [])
        self._scan('"clear"', context=_context)
        LHS = self._scan('LHS', context=_context)
        return "clear", LHS

    def copy(self, _parent=None):
        _context = self.Context(_parent, self._scanner, 'copy', [])
        self._scan('"copy"', context=_context)
        LHS = self._scan('LHS', context=_context)
        RHS = self._scan('RHS', context=_context)
        return "copy", LHS, RHS

    def copy_as(self, _parent=None):
        _context = self.Context(_parent, self._scanner, 'copy_as', [])
        self._scan('"copy_as"', context=_context)
        LHS = self._scan('LHS', context=_context)
        RHS = self._scan('RHS', context=_context)
        TY = self._scan('TY', context=_context)
        return "copy_as", LHS, RHS, TY

    def get_field(self, _parent=None):
        _context = self.Context(_parent, self._scanner, 'get_field', [])
        self._scan('"get_field"', context=_context)
        LHS = self._scan('LHS', context=_context)
        RHS = self._scan('RHS', context=_context)
        self._scan("'\\.'", context=_context)
        F = self._scan('F', context=_context)
        return "get_field", LHS, RHS, F

    def clear_field(self, _parent=None):
        _context = self.Context(_parent, self._scanner, 'clear_field', [])
        self._scan('"clear_field"', context=_context)
        LHS = self._scan('LHS', context=_context)
        self._scan("'\\.'", context=_context)
        F = self._scan('F', context=_context)
        return "clear_field", LHS, F

    def set_field(self, _parent=None):
        _context = self.Context(_parent, self._scanner, 'set_field', [])
        self._scan('"set_field"', context=_context)
        LHS = self._scan('LHS', context=_context)
        self._scan("'\\.'", context=_context)
        F = self._scan('F', context=_context)
        RHS = self._scan('RHS', context=_context)
        return "set_field", LHS, F, RHS

    def allocate(self, _parent=None):
        _context = self.Context(_parent, self._scanner, 'allocate', [])
        self._scan('"allocate"', context=_context)
        LHS = self._scan('LHS', context=_context)
        return "allocate", LHS

    def free(self, _parent=None):
        _context = self.Context(_parent, self._scanner, 'free', [])
        self._scan('"free"', context=_context)
        LHS = self._scan('LHS', context=_context)
        return "free", LHS

    def dispose(self, _parent=None):
        _context = self.Context(_parent, self._scanner, 'dispose', [])
        self._scan('"dispose"', context=_context)
        LHS = self._scan('LHS', context=_context)
        return "dispose", LHS

    def mark(self, _parent=None):
        _context = self.Context(_parent, self._scanner, 'mark', [])
        self._scan('"mark"', context=_context)
        LHS = self._scan('LHS', context=_context)
        PRED = self._scan('PRED', context=_context)
        return "mark", LHS, PRED

    def unmark(self, _parent=None):
        _context = self.Context(_parent, self._scanner, 'unmark', [])
        self._scan('"unmark"', context=_context)
        LHS = self._scan('LHS', context=_context)
        PRED = self._scan('PRED', context=_context)
        return "unmark", LHS, PRED

    def call(self, _parent=None):
        _context = self.Context(_parent, self._scanner, 'call', [])
        self._scan('"call"', context=_context)
        ID = self._scan('ID', context=_context)
        return "call", ID

    def inline(self, _parent=None):
        _context = self.Context(_parent, self._scanner, 'inline', [])
        self._scan('"inline call"', context=_context)
        ID = self._scan('ID', context=_context)
        return "inline_call", ID

    def call_args(self, _parent=None):
        _context = self.Context(_parent, self._scanner, 'call_args', [])
        self._scan('"call_args"', context=_context)
        ID = self._scan('ID', context=_context)
        args = self.args(_context)
        return "call_args", ID, args

    def assign(self, _parent=None):
        _context = self.Context(_parent, self._scanner, 'assign', [])
        lhs = self.lhs(_context)
        self._scan('":="', context=_context)
        rhs = self.rhs(_context)
        return "assign", lhs, rhs

    def lhs(self, _parent=None):
        _context = self.Context(_parent, self._scanner, 'lhs', [])
        expression = self.expression(_context)
        return expression

    def rhs(self, _parent=None):
        _context = self.Context(_parent, self._scanner, 'rhs', [])
        _token = self._peek('"\\("', '"null"', 'LHS', context=_context)
        if _token == '"\\("':
            self._scan('"\\("', context=_context)
            TY = self._scan('TY', context=_context)
            self._scan('"\\)"', context=_context)
            expression = self.expression(_context)
            return expression, TY
        else: # in ['"null"', 'LHS']
            expression = self.expression(_context)
            return expression, None

    def expression(self, _parent=None):
        _context = self.Context(_parent, self._scanner, 'expression', [])
        _token = self._peek('"null"', 'LHS', context=_context)
        if _token == '"null"':
            self._scan('"null"', context=_context)
            return "expression", None, None
        else: # == 'LHS'
            LHS = self._scan('LHS', context=_context)
            expression2 = self.expression2(_context)
            return "expression", LHS, expression2

    def expression2(self, _parent=None):
        _context = self.Context(_parent, self._scanner, 'expression2', [])
        _token = self._peek('"\\."', '":="', 'NL', context=_context)
        if _token == '"\\."':
            self._scan('"\\."', context=_context)
            LHS = self._scan('LHS', context=_context)
            return LHS
        else: # in ['":="', 'NL']
            return None

    def args(self, _parent=None):
        _context = self.Context(_parent, self._scanner, 'args', [])
        self._scan('"\\("', context=_context)
        a = []
        while self._peek('"\\)"', 'ID', context=_context) == 'ID':
            ID = self._scan('ID', context=_context)
            a.append(id)
        self._scan('"\\)"', context=_context)
        return a

    def while_(self, _parent=None):
        _context = self.Context(_parent, self._scanner, 'while_', [])
        _token = self._peek('"while"', 'NL', context=_context)
        if _token == '"while"':
            self._scan('"while"', context=_context)
            condition = self.condition(_context)
            NL = self._scan('NL', context=_context)
            body = self.body(_context)
            self._scan('"end"', context=_context)
            return ("while", condition, body)
        else: # == 'NL'
            pass

    def if_(self, _parent=None):
        _context = self.Context(_parent, self._scanner, 'if_', [])
        self._scan('"if"', context=_context)
        condition = self.condition(_context)
        NL = self._scan('NL', context=_context)
        body = self.body(_context)
        true_branch  = body
        false_branch = []
        if self._peek('"else"', '"end"', context=_context) == '"else"':
            self._scan('"else"', context=_context)
            NL = self._scan('NL', context=_context)
            body = self.body(_context)
            false_branch = body
        self._scan('"end"', context=_context)
        return "if", condition, true_branch, false_branch

    def assert_(self, _parent=None):
        _context = self.Context(_parent, self._scanner, 'assert_', [])
        self._scan('"assert"', context=_context)
        condition = self.condition(_context)
        return "assert", condition

    def choice(self, _parent=None):
        _context = self.Context(_parent, self._scanner, 'choice', [])
        self._scan('"choice"', context=_context)
        NL = self._scan('NL', context=_context)
        body = self.body(_context)
        choices = [body]
        while self._peek('"end"', '"or"', context=_context) == '"or"':
            self._scan('"or"', context=_context)
            NL = self._scan('NL', context=_context)
            body = self.body(_context)
            choices.append(body)
        self._scan('"end"', context=_context)
        return "choice", choices

    def optional(self, _parent=None):
        _context = self.Context(_parent, self._scanner, 'optional', [])
        self._scan('"optional"', context=_context)
        NL = self._scan('NL', context=_context)
        body = self.body(_context)
        choices = [[("skip",)], body]
        while self._peek('"end"', '"or"', context=_context) == '"or"':
            self._scan('"or"', context=_context)
            NL = self._scan('NL', context=_context)
            body = self.body(_context)
            choices.append(body)
        self._scan('"end"', context=_context)
        return "choice", choices

    def assume(self, _parent=None):
        _context = self.Context(_parent, self._scanner, 'assume', [])
        self._scan('"assume"', context=_context)
        condition = self.condition(_context)
        return "assume", condition

    def condition(self, _parent=None):
        _context = self.Context(_parent, self._scanner, 'condition', [])
        _token = self._peek('"true"', '"false"', '"not"', '"null"', '"marked"', '"rel"', '"equal"', 'LHS', context=_context)
        if _token == '"true"':
            self._scan('"true"', context=_context)
            return "true",
        elif _token == '"false"':
            self._scan('"false"', context=_context)
            return "false",
        elif _token == '"not"':
            self._scan('"not"', context=_context)
            condition = self.condition(_context)
            return "not", condition
        elif _token == '"null"':
            null = self.null(_context)
            return null
        elif _token == '"marked"':
            marked = self.marked(_context)
            return marked
        elif _token == '"rel"':
            rel = self.rel(_context)
            return rel
        else: # in ['"equal"', 'LHS']
            equal = self.equal(_context)
            return equal

    def null(self, _parent=None):
        _context = self.Context(_parent, self._scanner, 'null', [])
        self._scan('"null"', context=_context)
        LHS = self._scan('LHS', context=_context)
        return "null",  LHS

    def equal(self, _parent=None):
        _context = self.Context(_parent, self._scanner, 'equal', [])
        _token = self._peek('"equal"', 'LHS', context=_context)
        if _token == '"equal"':
            self._scan('"equal"', context=_context)
            LHS = self._scan('LHS', context=_context)
            RHS = self._scan('RHS', context=_context)
            return "equal", LHS, RHS
        else: # == 'LHS'
            LHS = self._scan('LHS', context=_context)
            equal2 = self.equal2(_context)
            return equal2[0], LHS, equal2[1]

    def equal2(self, _parent=None):
        _context = self.Context(_parent, self._scanner, 'equal2', [])
        _token = self._peek('"=="', '"!="', '"is"', context=_context)
        if _token == '"=="':
            self._scan('"=="', context=_context)
            RHS = self._scan('RHS', context=_context)
            return "equal", RHS
        elif _token == '"!="':
            self._scan('"!="', context=_context)
            RHS = self._scan('RHS', context=_context)
            return "unequal", RHS
        else: # == '"is"'
            self._scan('"is"', context=_context)
            TY = self._scan('TY', context=_context)
            return "marked", TY

    def marked(self, _parent=None):
        _context = self.Context(_parent, self._scanner, 'marked', [])
        self._scan('"marked"', context=_context)
        LHS = self._scan('LHS', context=_context)
        PRED = self._scan('PRED', context=_context)
        return "marked", LHS, PRED

    def rel(self, _parent=None):
        _context = self.Context(_parent, self._scanner, 'rel', [])
        self._scan('"rel"', context=_context)
        LHS = self._scan('LHS', context=_context)
        PRED = self._scan('PRED', context=_context)
        RHS = self._scan('RHS', context=_context)
        return "rel", LHS, PRED, RHS

    def focus(self, _parent=None):
        _context = self.Context(_parent, self._scanner, 'focus', [])
        self._scan('"focus"', context=_context)
        LHS = self._scan('LHS', context=_context)
        return "focus",  LHS

    def select(self, _parent=None):
        _context = self.Context(_parent, self._scanner, 'select', [])
        self._scan('"select"', context=_context)
        LHS = self._scan('LHS', context=_context)
        TY = self._scan('TY', context=_context)
        return "select", LHS, TY

    def do_(self, _parent=None):
        _context = self.Context(_parent, self._scanner, 'do_', [])
        self._scan('"%"', context=_context)
        ID = self._scan('ID', context=_context)
        idlist = self.idlist(_context)
        return "%", ID, idlist


def parse(rule, text):
    P = IMP3(IMP3Scanner(text))
    return runtime.wrap_error_reporter(P, rule)

if __name__ == '__main__':
    from sys import argv, stdin
    if len(argv) >= 2:
        if len(argv) >= 3:
            f = open(argv[2],'r')
        else:
            f = stdin
        print(parse(argv[1], f.read()))
    else: print ('Args:  <rule> [<filename>]', file=sys.stderr)
# End -- grammar generated by Yapps
